package com.example.galleryconnector.server;

import android.content.ContentResolver;
import android.net.Uri;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import okhttp3.FormBody;
import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;


//Note to me: All of this was grabbed from GalleryModularized's ServerConnector (with some flow changes)

public class TempFunctions {

	public void tempGetBlocks(List<String> hashes) {
		ExecutorService executorService = Executors.newFixedThreadPool(4);
		Runnable getBlockUris = () -> {
			Block blockAPI = new Block();
			List<String> uris = new ArrayList<>();
			for(String hash : hashes) {
				try {
					byte[] blockThing = blockAPI.getBlock(hash);
					String blck = new String(blockThing);
					uris.add(blck);
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}
			System.out.println("Blocks received: ");
			for(String uri : uris) {
				System.out.println(uri);
			}
		};
		executorService.execute(getBlockUris);
	}


	public void tempUpload(Uri fileUri, ContentResolver contentResolver) throws IOException {
		//Uri fileUri = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.ocean_with_audio);

		ExecutorService executorService = Executors.newFixedThreadPool(4);

		Runnable upload = () -> {
			TempFunctions blockAPI = new TempFunctions();
			try {
				blockAPI.uploadFile(fileUri, contentResolver);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		};

		executorService.execute(upload);
	}


	//---------------------------------------------------------------------------------------------
	// File
	//---------------------------------------------------------------------------------------------


	public List<String> commitFileBlockset(@NonNull UUID fileUID, List<String> fileblocks) throws IOException {
		RequestBody body = new FormBody.Builder()
				.add("fileblocks", new Gson().toJson(fileblocks))
				.build();

		Request request = new Request.Builder()
				.url(baseServerUrl +"/files/commit/"+fileUID)
				.put(body)
				.build();


		try (Response response = client.newCall(request).execute()) {
			//If code == 400, there are missing blocks
			if(response.code() == 400) {
				String respBody = response.body().string();

				//Get which blocks are missing
				JsonObject obj = new Gson().fromJson(respBody, JsonObject.class);
				List<String> entries = new Gson().fromJson(obj.get("missingblocks"),
						new TypeToken< List<String> >(){}.getType());

				Log.i(TAG, "commitFileBlockset: Missing blocks: "+entries);
				return entries;
			}

			if (!response.isSuccessful()) {
				System.out.println(response);
				throw new IOException("Unexpected code " + response.code());
			}

			//No blocks are missing, all good
			return new ArrayList<>();
		} catch (Exception e){
			e.printStackTrace();
			throw e;
		}
	}


	//---------------------------------------------------------------------------------------------


	static final int CHUNK_SIZE = 1024 * 1024 * 4;  //4MB

	public void uploadFile(@NonNull Uri source, ContentResolver contentResolver) throws IOException {
		System.out.println("Attempting to upload");

		//We need to know what blocks in the blocklist the server is missing.
		//To do that, we need to attempt to commit the file blocklist to the server.
		//To do that, we need the blocklist. Get the blocklist:
		List<String> fileHashes = new ArrayList<>();
		try (InputStream is = contentResolver.openInputStream(source)) {
			//Read the next block
			byte[] block = new byte[CHUNK_SIZE];
			int read;
			while((read = is.read(block)) != -1) {
				//Trim block if needed
				if (read != CHUNK_SIZE) {
					byte[] smallerData = new byte[read];
					System.arraycopy(block, 0, smallerData, 0, read);
					block = smallerData;
				}

				if(block.length == 0)   //Don't put empty blocks in the blocklist
					continue;

				//Hash the block
				byte[] hash = MessageDigest.getInstance("SHA-256").digest(block);
				String hashString = bytesToHex(hash);

				//Add to the hash list
				fileHashes.add(hashString);
			}
		} catch (IOException | NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		System.out.println("FileHashes: \n"+fileHashes);



		//Upload blocks
		for(String hash : fileHashes) {
			//Go to the correct block
			int index = fileHashes.indexOf(hash);
			int blockStart = index * CHUNK_SIZE;

			System.out.println("Reading block at "+blockStart+" = '"+hash+"'");
			try (InputStream is = contentResolver.openInputStream(source)) {
				//Read the missing block
				is.skip(blockStart);
				byte[] block = new byte[CHUNK_SIZE];
				int read = is.read(block);

				//Trim block if needed
				if (read != CHUNK_SIZE) {
					byte[] smallerData = new byte[read];
					System.arraycopy(block, 0, smallerData, 0, read);
					block = smallerData;
				}

				//Throw it to the wind
				new Block().uploadBlock(hash, block);
			} catch (IOException e) {
				System.out.println("Block upload failed with hash "+hash);
				e.printStackTrace();
			}
		}

		System.out.println("Successful upload!");
	}
}
